{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["awsconfig","Auth","identityPoolId","region","userPoolId","userPoolWebClientId","mandatorySignIn","oauth","domain","scope","redirectSignIn","window","location","hostname","redirectSignOut","responseType","console","log","Amplify","configure","App","state","user","iot","things","loaded","authenticated","this","currentAuthenticatedUser","setState","currentCredentials","credentials","AWS","config","update","accessKeyId","secretAccessKey","sessionToken","Iot","listThings","promise","attachPrincipalPolicy","policyName","principal","identityId","err","res","error","addPluggable","AWSIoTProvider","aws_pubsub_region","aws_pubsub_endpoint","PubSub","subscribe","next","data","close","thing","action","message","publish","msg","Container","Button","variant","onClick","signOut","List","map","ListItem","key","thingArn","ListItemIcon","ListItemText","primary","thingName","color","Component","withAuthenticator","Boolean","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.966d3268.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport { \n  Container, \n  Button, \n  List, ListItem, ListItemIcon, ListItemText,\n} from '@material-ui/core'\nimport CameraIcon from '@material-ui/icons/Camera';\n\nimport AWS from 'aws-sdk';\nimport { withAuthenticator } from 'aws-amplify-react'\nimport Amplify, { Auth, PubSub } from 'aws-amplify'\nimport { AWSIoTProvider } from '@aws-amplify/pubsub/lib/Providers';\n\nlet awsconfig = {\n  Auth: {\n    identityPoolId: \"us-west-2:f533019d-9cbe-4a39-ad43-574c7316ad26\",\n    region: \"us-west-2\",\n    userPoolId: \"us-west-2_d9YBsfCk1\",\n    userPoolWebClientId: \"54n46fo7gq5vprpg74qo4b8825\",\n    mandatorySignIn: true,\n    oauth: {\n      domain: \"braingeneers.auth.us-west-2.amazoncognito.com\",\n      scope: [\"email\", \"openid\", \"profile\"],\n      redirectSignIn: (window.location.hostname === \"localhost\") ? \n        \"http://localhost:3000/\" : \"https://www.braingeneers.org/things/\",\n      redirectSignOut: (window.location.hostname === \"localhost\") ? \n        \"http://localhost:3000/\" : \"https://www.braingeneers.org/things/\",\n      responseType: \"token\"\n    }\n  }\n}\nconsole.log(awsconfig)\nAmplify.configure(awsconfig)\n\nclass App extends Component {\n  state = {\n    user: null,\n    iot: null,\n    things: null,\n    loaded: false,\n    authenticated: false,\n  }\n\n  async componentDidMount() {\n    this.setState({ user: await Auth.currentAuthenticatedUser() })\n    const credentials = await Auth.currentCredentials()\n    AWS.config.update({\n      region: awsconfig.Auth.region,\n      accessKeyId: credentials.accessKeyId,\n      secretAccessKey: credentials.secretAccessKey,\n      sessionToken: credentials.sessionToken\n    })\n    try {\n      const iot = new AWS.Iot({credentials: credentials})\n      this.setState({ iot: iot })\n      this.setState({ things: await this.state.iot.listThings().promise() })\n\n      iot.attachPrincipalPolicy({\n        policyName: 'default',\n        principal: credentials.identityId\n      }, (err, res) => { \n        if (err) console.error(err); \n      });\n\n      Amplify.addPluggable(new AWSIoTProvider({\n        aws_pubsub_region: awsconfig.Auth.region,\n        aws_pubsub_endpoint: 'wss://ahp00abmtph4i-ats.iot.us-west-2.amazonaws.com/mqtt'\n      }));\n\n      PubSub.subscribe('picroscope/#').subscribe({\n        next: data => console.log('Message received', data),\n        error: error => console.error(error),\n        close: () => console.log('Done'),\n      });\n\n      this.setState({ authenticated: true })\n    } catch(error) {\n      console.log(\"Unable to authenticate\", error)\n    }\n\n    this.setState({ loaded: true })\n  }\n\n  async publish(thing, action, message) {\n    console.log(`${thing}/${action}`, message)\n    await PubSub.publish(`${thing}/${action}`, { msg: message })\n  }\n\n  render() {\n    if (!this.state.loaded) return (<div>Loading...</div>)\n\n    if (!this.state.authenticated) return (\n      <Container>\n        <Button variant=\"outlined\"\n          onClick={() => Auth.signOut()}>Sign Out</Button>\n        Not authorized\n      </Container>\n    )\n\n    return (\n      <Container>\n        <Button variant=\"outlined\"\n          onClick={() => Auth.signOut()}>Sign Out</Button>\n        <List>\n        {this.state.things.things.map(thing =>\n          <ListItem key={thing.thingArn}>\n            <ListItemIcon>\n              <CameraIcon />\n            </ListItemIcon>\n            <ListItemText primary={thing.thingName} />\n            <Button variant=\"outlined\" color=\"primary\" \n              onClick={() => this.publish(\"picroscope\", \"start\", \"a message\")}>Start</Button>\n            <Button variant=\"outlined\" color=\"secondary\" \n              onClick={() => this.publish(\"picroscope\", \"stop\", \"a message\")}>Stop</Button>\n          </ListItem>\n        )}\n        </List>\n      </Container>\n    )\n  }\n}\n\nexport default withAuthenticator(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}